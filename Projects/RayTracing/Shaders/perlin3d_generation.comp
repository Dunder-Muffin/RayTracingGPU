#version 440
layout( local_size_x = 8, local_size_y = 8, local_size_z = 8 ) in;

writeonly uniform image3D perlinNoise;


#define seed 10808
#define oct 10

int p(int i)
{
  const int[256] permutation = int[256](151,160,137,91,90,105,
      131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,203,
      190, 126,148,247,120,234,75,0,6,197,62,94,252,219,203,117,35,11,32,57,177,133,
      88,237,149,56,87,174,20,125,136,171,168, 68,175,74,15,71,134,139,48,27,166,
      177,146,158,21,83,111,229,12,60,211,133,230,220,105,92,41,55,46,245,40,244,
      102,143,54, 65,25,63,161, 111,216,80,73,209,76,132,187,208, 89,18,169,200,196,
      135,130,116,188,159,86,164,100,109,198,173,186, 223,64,52,217,226,250,124,123,
      5,202,38,147,118,126,255,182,185,212,207,206,59,227,147,16,58,17,182,189,28,142,
      223,183,170,213,119,248,152, 222,4,154,163, 170,221,153,101,155,167, 43,172,119,
      129,222,39,253, 19,98,108,110,189,113,224,232,178,185, 112,104,218,246,97,228,
      251,134,242,193,238,210,144,12,191,179,162,241, 181,151,145,25,249,14,29,107,
      49,192,214, 131,181,199,106,57,184, 84,204,176,115,121,150,145,127, 24,150,254,
      138,236,205,93,222,114,167,229,224,172,243,141,128,195,178,166,215,161,156,180
  );
  i = (i + 256) % 256;
  return permutation[i];
}
float fade(float t)
{
    return t * t * t * (t * (t * 6 - 15) + 10);
}
float gradient(int hash, float x, float y, float z)
{
  int h = hash & 15;
  float u = h < 8 ? x : y;
  float v = h < 4 ? y : h == 12 || h == 14 ? x : z;
  return ((h & 1) == 0 ? u : -u) + ((h & 2) == 0 ? v : -v);
}
float lerp(float t, float a, float b)
{
    return a + t * (b - a);
}
int mod(int x, int m)
{
  return (x + m) % m;
}
float noise(float x, float y, float z, int m)
{
#pragma optionNV (unroll all)
  int x1 = int(floor(x)) % m,
      y1 = int(floor(y)) % m,
      z1 = int(floor(z)) % m;

  x -= floor(x);
  y -= floor(y);
  z -= floor(z);

  float x2 = fade(x),
          y2 = fade(y),
          z2 = fade(z);
  float g[2][2][2];
  int h0[2];
  int h1[2][2];
  int h2[2][2][2];
  for (int i = 0; i < 2; i++)
    h0[i] = p(mod(x1 + i, m));
  for (int i = 0; i < 2; i++)
    for (int j = 0; j < 2; j++)
     h1[i][j] = p(h0[i] + mod(y1 + j, m));

  for (int i = 0; i < 2; i++)
    for (int j = 0; j < 2; j++)
      for (int k = 0; k < 2; k++)
        h2[i][j][k] = p(h1[i][j] + mod(z1 + k, m));

  for (int i = 0; i < 2; i++)
    for (int j = 0; j < 2; j++)
      for (int k = 0; k < 2; k++)
        g[i][j][k] = gradient(h2[i][j][k], x - i, y - j, z - k);

  for (int i = 0; i < 2; i++)
    for (int j = 0; j < 2; j++)
      g[i][j][0] = mix(g[i][j][0], g[i][j][1], z2);

  for (int i = 0; i < 2; i++)
    g[i][0][0] = mix(g[i][0][0], g[i][1][0], y2);
  
  g[0][0][0] = mix(g[0][0][0], g[1][0][0], x2);

  return g[0][0][0];
}

void main()
{  
  ivec3 idx = ivec3(gl_GlobalInvocationID);
  ivec3 size = imageSize(perlinNoise);
  size.z = size.x;
  vec3 UV = vec3(idx) / size;
  float k, x  = UV.x, y = UV.y, z = UV.z;
  float mx = 0;
  float a = 0;
  for (int l = 0; l < oct; l++)
  {
    int m = 1 << l;
    k = m;
    mx += 1 / k;
    a += noise(x * k , y * k, z * k, m) / k;
  }
  a = (a / mx + 1) / 2;
  float h = clamp(a, 0.0f, 1.0f);
  imageStore(perlinNoise, idx, vec4(h, 0, 0, 0));
}